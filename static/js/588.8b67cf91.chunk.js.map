{"version":3,"file":"static/js/588.8b67cf91.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","webpack://react-homework-template/./src/components/AddContactForm/AddContactForm.module.css?92ef","../node_modules/nanoid/index.browser.js","components/AddContactForm/AddContactForm.jsx","webpack://react-homework-template/./src/components/SearchFilter/SearchFilter.module.css?1801","components/SearchFilter/SearchFilter.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactsList.module.css?d8e9","webpack://react-homework-template/./src/components/ContactsListItem/ContactsListItem.module.css?e52b","components/ContactsListItem/ContactsListItem.jsx","components/ContactsList/ContactsList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.contacts.contacts;\nexport const selectContactsError = state => state.contacts.error;\nexport const selectContactsIsLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = store => store.contacts.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) =>\n    contacts.filter(profile =>\n      profile.name.toLowerCase().includes(filter.trim().toLowerCase())\n    )\n);","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"AddContactForm_form__JaAdA\",\"formLabel\":\"AddContactForm_formLabel__iq-d-\",\"formInput\":\"AddContactForm_formInput__saohc\",\"formButton\":\"AddContactForm_formButton__x3Vyr\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useDispatch, useSelector } from 'react-redux';\nimport css from './AddContactForm.module.css';\nimport { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from '../../redux/contacts/contactsSelectors';\nimport { apiAddContact } from '../../redux/contacts/contactsSlice';\n\nexport const AddContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const [form, setForm] = useState({\n    name: '',\n    number: '',\n  });\n\n  const handleFormChange = event => {\n    const { name, value } = event.target;\n    setForm(prevData => ({\n      ...prevData,\n      [name]: value,\n    }));\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const formData = {\n      name: form.name.toLowerCase(),\n      number: form.number,\n    };\n\n    const hasDuplicates = contacts.some(\n      contact => contact.name === formData.name\n    );\n    if (hasDuplicates) {\n      alert(`Profile with name ${formData.name} already exists!`);\n      return;\n    }\n    const finalContacts = {\n      ...formData,\n      id: nanoid(),\n    };\n\n    dispatch(apiAddContact(finalContacts));\n    setForm('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.form}>\n      <label>\n        <span className={css.formLabel}>Name:</span>\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={form.name || ''}\n          placeholder=\"Alex\"\n          onChange={handleFormChange}\n          className={css.formInput}\n          required\n        />\n      </label>\n      <label>\n        <span className={css.formLabel}>Number:</span>\n        <input\n          type=\"tel\"\n          pattern=\"[0-9]{3}-[0-9]{2}-[0-9]{2}\"\n          max=\"7\"\n          name=\"number\"\n          value={form.number || ''}\n          onChange={handleFormChange}\n          placeholder=\"111-11-11\"\n          className={css.formInput}\n          required\n        />\n      </label>\n      <button type=\"submit\" className={css.formButton}>\n        Add Contact\n      </button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterContainer\":\"SearchFilter_filterContainer__nlAPZ\",\"filterTitle\":\"SearchFilter_filterTitle__avV3M\",\"filterInput\":\"SearchFilter_filterInput__QJcWn\"};","import { useState } from 'react';\nimport { setFilter } from '../../redux/contacts/contactsSlice';\nimport css from './SearchFilter.module.css';\nimport { useDispatch } from 'react-redux';\n\nexport const SearchFilter = () => {\n  const dispatch = useDispatch();\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = e => {\n    const value = e.target.value;\n    setInputValue(value);\n    dispatch(setFilter(value));\n  };\n\n  return (\n    <div className={css.filterContainer}>\n      <p className={css.filterTitle}>Find Profile:</p>\n      <input\n        value={inputValue}\n        onChange={handleInputChange}\n        type=\"text\"\n        name=\"filter\"\n        className={css.filterInput}\n      />\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactsList_contactList__qIIH9\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactListItem\":\"ContactsListItem_contactListItem__3Ppke\",\"deleteButton\":\"ContactsListItem_deleteButton__wxfAS\"};","import { useDispatch } from 'react-redux';\nimport css from './ContactsListItem.module.css';\nimport { apiDeleteContact } from '../../redux/contacts/contactsSlice';\n\nexport const ContactsListItem = ({ contacts }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li className={css.contactListItem}>\n      {contacts.name}: {contacts.number}\n      <button\n        onClick={() => dispatch(apiDeleteContact(contacts.id))}\n        className={css.deleteButton}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n","import css from './ContactsList.module.css';\nimport { ContactsListItem } from '../ContactsListItem/ContactsListItem';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from '../../redux/contacts/contactsSelectors';\n\nexport const ContactsList = () => {\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <ul className={css.contactList}>\n      {filteredContacts.map(contact => (\n        <ContactsListItem key={contact.id} contacts={contact} />\n      ))}\n    </ul>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { apiGetContacts } from '../redux/contacts/contactsSlice';\nimport {\n  selectContactsError,\n  selectContactsIsLoading,\n} from '../redux/contacts/contactsSelectors';\n\nimport { AddContactForm } from 'components/AddContactForm/AddContactForm';\nimport { Loader } from 'components/Loader/Loader';\nimport { SearchFilter } from 'components/SearchFilter/SearchFilter';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n\n  useEffect(() => {\n    dispatch(apiGetContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && 'Error'}\n      <AddContactForm />\n      <SearchFilter />\n      <ContactsList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","selectContactsError","error","selectContactsIsLoading","isLoading","selectFilteredContacts","createSelector","store","filter","profile","name","toLowerCase","includes","trim","nanoid","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","AddContactForm","dispatch","useDispatch","useSelector","_useState","useState","number","_useState2","_slicedToArray","form","setForm","handleFormChange","event","_event$target","target","value","prevData","_objectSpread","_defineProperty","_jsxs","onSubmit","preventDefault","formData","some","contact","alert","concat","finalContacts","apiAddContact","className","css","children","_jsx","type","placeholder","onChange","required","pattern","max","SearchFilter","inputValue","setInputValue","e","setFilter","ContactsListItem","_ref","onClick","apiDeleteContact","ContactsList","filteredContacts","map","useEffect","apiGetContacts","Loader"],"sourceRoot":""}